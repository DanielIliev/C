Тема 2:

Всяка дума се разделя на нов ред (знаците се изпускат!)
Не се проверява съвпадение на еднавки думи (в тема 4 в речникът не се позволява дублаж)

За думите:
Символите делящи изреченията може да си сложим в масив
Масив държач на дума след което я записваме във файла и продължаваме нататък (виж режими за работа с файл, за да не изтриваш предишни данни)

За изреченията:
Като идея диначино да се задели някакво първоначално количество памет и след това да се презаделя допълнителна памет

Автоматен модел (не са задължителни):
Проверка на правилен запис на пътя към файла C:/dir/dir2/file.txt

Тема 3:
Заделяне на числа в динамичен масив и сортирането им по големина, средно аритметично и т.н.

Тема 4:
Метод на сортиране с произволен метод (примерно на мехурче)

#include <stdio.h>
#include <stdlib.h>
#include <dirent.h>

void readDirectory();
FILE *readFile();
FILE *menu();
void readData(FILE *fp);

int main() {
    char word_separators[] = {'.', ',', '?', '!', ':', ';', '/'};
    char sentence_separators[] = {'.', ':', '!', '?'};
    FILE *fp;
    fp = menu();
    readData(fp);
    if(fclose(fp)==0) {
        printf("File closed... exiting");
    }
    return 0;
}
FILE *menu() {
	system("cls");
	printf("Menu items\n");
	readDirectory();
	FILE *fp = readFile();
	return fp;
}
void readDirectory() {
	DIR *d;
	struct dirent *dir;
	if ((d=opendir("."))!=NULL)
	{
		while ((dir=readdir(d)) != NULL) {
			if (strcmp(dir->d_name, "..") > 0)
			{
				printf("%s\n", dir->d_name);
			}
		}
	}
	closedir(d);
}
FILE *readFile() {
	FILE *fp;
	char user_file[255];
	int opened = 0;
	while(opened==0) {
		printf("Input the file name (as seen on screen):");
		scanf("%255s", user_file);
		if ((fp=fopen(user_file, "r")) != NULL)
		{
			printf("File opened\n");
			opened=1;
		} else {
			printf("Bad name, please try again\n");
			continue;
		}
	}
	return fp;
}
void readData(FILE *fp) {
    char c;
    while((c=fgetc(fp)) != EOF) {
        switch(c) {

        }
    }
}
